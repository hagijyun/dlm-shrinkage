// Gaussian DLM values
#ifndef STAN_HEADER_KALMANF
#define STAN_HEADER_KALMANF

#include <transpose.stanh>
#include <make_symmetric.stanh>

// sequential, no missing values
#define _KALMANF_SEQ(r, n, y, F, G, V, W, m0, C0) \
{ \
  vector[r] KALMANF_LL; \
  vector[n] KALMANF_m; \
  matrix[n, n] KALMANF_C; \
  real KALMANF_f; \
  real KALMANF_Q; \
  real KALMANF_Q_inv; \
  real KALMANF_e; \
  vector[n] KALMANF_A; \
  vector[n] KALMANF_Fj; \
  KALMANF_m <- m0; \
  KALMANF_C <- C0; \
  for (i in 1:T) { \
    KALMANF_m <- G * KALMANF_m; \
    KALMANF_C <- G _T * KALMANF_C * G + W; \
    KALMANF_C <- _MAKE_SYMMETRIC(KALMANF_C); \
    for (j in 1:r) { \
      KALMANF_Fj <- col(F, j); \
      KALMANF_f <- dot_product(KALMANF_Fj, KALMANF_m); \
      KALMANF_Q <- KALMANF_Fj _T * KALMANF_C * KALMANF_Fj + V[j]; \
      KALMANF_Q_inv <- 1.0 / KALMANF_Q; \
      KALMANF_e <- y[j, i] - KALMANF_f;                      \
      KALMANF_A <- KALMANF_C * KALMANF_Fj * KALMANF_Q_inv; \
      KALMANF_m <- KALMANF_m + KALMANF_A * KALMANF_e; \
      KALMANF_C <- KALMANF_C - KALMANF_Q * KALMANF_A * KALMANF_A _T; \
      KALMANF_C <- _MAKE_SYMMETRIC(KALMANF_C); \
      KALMANF_LL[j] <- (-0.5 *  \
                        (log(2 * pi())  \
                         + log(KALMANF_Q_inv)  \
                         + KALMANF_Q_inv * pow(KALMANF_e, 2.0))); \
    } \
    lp__ <- lp__ + sum(KALMANF_LL); \
  } \
} \

// sequential, missing values
#define _KALMANF_SEQ_M(r, n, y, F, G, V, W, m0, C0, mask) \
{ \
  vector[r] KALMANF_LL; \
  vector[n] KALMANF_m; \
  matrix[n, n] KALMANF_C; \
  real KALMANF_f; \
  real KALMANF_Q; \
  real KALMANF_Q_inv; \
  real KALMANF_e; \
  vector[n] KALMANF_A; \
  vector[n] KALMANF_Fj; \
  KALMANF_m <- m0; \
  KALMANF_C <- C0; \
  for (i in 1:T) { \
    KALMANF_m <- G * KALMANF_m; \
    KALMANF_C <- G _T * KALMANF_C * G + W; \
    KALMANF_C <- _MAKE_SYMMETRIC(KALMANF_C); \
    for (j in 1:r) { \
      if (int_step(mask[i, j])) { \
        KALMANF_LL[j] <- 0.0; \
      } else { \
        KALMANF_Fj <- F[j] _T;                         \
        KALMANF_f <- dot_product(KALMANF_Fj, KALMANF_m);          \
        KALMANF_Q <- KALMANF_Fj _T * KALMANF_C * KALMANF_Fj + V[j];     \
        KALMANF_Q_inv <- 1.0 / KALMANF_Q;                               \
        KALMANF_e <- y[i, j] - KALMANF_f;                               \
        KALMANF_A <- KALMANF_C * KALMANF_Fj * KALMANF_Q_inv;            \
        KALMANF_m <- KALMANF_m + KALMANF_A * KALMANF_e;                 \
        KALMANF_C <- KALMANF_C - KALMANF_Q * KALMANF_A * KALMANF_A _T;  \
	KALMANF_C <- _MAKE_SYMMETRIC(KALMANF_C); \
        KALMANF_LL[j] <- (-0.5 *                                        \
                          (log(2 * pi())                                \
                           + log(KALMANF_Q_inv)                         \
                           + KALMANF_Q_inv * pow(KALMANF_e, 2.0)));     \
      } \
    } \
    lp__ <- lp__ + sum(KALMANF_LL); \
  } \
} \

// sequential, no missings, constant terms
#define _KALMANF_SEQ_C(r, n, y, F, G, V, W, m0, C0, F0, G0)        \
{ \
  vector[r] KALMANF_LL; \
  vector[n] KALMANF_m; \
  matrix[n, n] KALMANF_C; \
  real KALMANF_f; \
  real KALMANF_Q; \
  real KALMANF_Q_inv; \
  real KALMANF_e; \
  vector[n] KALMANF_A; \
  vector[n] KALMANF_Fj; \
  KALMANF_m <- m0; \
  KALMANF_C <- C0; \
  for (i in 1:T) { \
    KALMANF_m <- G * KALMANF_m + G0; \
    KALMANF_C <- G _T * KALMANF_C * G + W; \
    KALMANF_C <- 0.5 * (KALMANF_C + KALMANF_C _T); \
    for (j in 1:r) { \
      KALMANF_Fj <- F[j] _T; \
      KALMANF_f <- dot_product(KALMANF_Fj, KALMANF_m) + F0[j]; \
      KALMANF_Q <- KALMANF_Fj _T * KALMANF_C * KALMANF_Fj + V[j]; \
      KALMANF_Q_inv <- 1.0 / KALMANF_Q; \
      KALMANF_e <- y[i, j] - KALMANF_f; \
      KALMANF_A <- KALMANF_C * KALMANF_Fj * KALMANF_Q_inv; \
      KALMANF_m <- KALMANF_m + KALMANF_A * KALMANF_e; \
      KALMANF_C <- KALMANF_C - KALMANF_Q * KALMANF_A * KALMANF_A _T; \
      KALMANF_C <- 0.5 * (KALMANF_C + KALMANF_C _T); \
      KALMANF_LL[j] <- (-0.5 *  \
                        (log(2 * pi())  \
                         + log(KALMANF_Q_inv)  \
                         + KALMANF_Q_inv * pow(KALMANF_e, 2.0))); \
    } \
    lp__ <- lp__ + sum(KALMANF_LL); \
  } \
} \

// Sequential, Constants, Missing values
#define _KALMANF_SEQ_MC(r, n, y, F, G, V, W, m0, C0, F0, G0, mask)       \
{ \
  vector[r] KALMANF_LL; \
  vector[n] KALMANF_m; \
  matrix[n, n] KALMANF_C; \
  real KALMANF_f; \
  real KALMANF_Q; \
  real KALMANF_Q_inv; \
  real KALMANF_e; \
  vector[n] KALMANF_A; \
  vector[n] KALMANF_Fj; \
  KALMANF_m <- m0; \
  KALMANF_C <- C0; \
  for (i in 1:T) { \
    KALMANF_m <- G * KALMANF_m + G0; \
    KALMANF_C <- G _T * KALMANF_C * G + W; \
    KALMANF_C <- 0.5 * (KALMANF_C + KALMANF_C _T); \
    for (j in 1:r) { \
      if (int_step(mask[i, j])) { \
        KALMANF_LL[j] <- 0.0; \
      } else { \
        KALMANF_Fj <- F[j] _T;                         \
        KALMANF_f <- dot_product(KALMANF_Fj, KALMANF_m) + F0[j] \
        KALMANF_Q <- KALMANF_Fj _T * KALMANF_C * KALMANF_Fj + V[j];     \
        KALMANF_Q_inv <- 1.0 / KALMANF_Q;                               \
        KALMANF_e <- y[i, j] - KALMANF_f;                               \
        KALMANF_A <- KALMANF_C * KALMANF_Fj * KALMANF_Q_inv;            \
        KALMANF_m <- KALMANF_m + KALMANF_A * KALMANF_e;                 \
        KALMANF_C <- KALMANF_C - KALMANF_Q * KALMANF_A * KALMANF_A _T;  \
        KALMANF_C <- 0.5 * (KALMANF_C + KALMANF_C _T);                  \
        KALMANF_LL[j] <- (-0.5 *                                        \
                          (log(2 * pi())                                \
                           + log(KALMANF_Q_inv)                         \
                           + KALMANF_Q_inv * pow(KALMANF_e, 2.0)));     \
      } \
=======
      KALMANF_C <- _MAKE_SYMMETRIC(KALMANF_C); \
      KALMANF_LL[j] <- (-0.5 * (log(KALMANF_Q)  \
                                + KALMANF_Q_inv * pow(KALMANF_e, 2))); \
>>>>>>> 81d48e8c6f60753562fa30708591d3823344cc64
    } \
    lp__ <- lp__ + sum(KALMANF_LL); \
  } \
} \

#endif
