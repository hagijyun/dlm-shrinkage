// Gaussian DLM values
#ifndef STAN_HEADER_KALMANFM
#define STAN_HEADER_KALMANFM

#include <transpose.stanh>
#include <make_symmetric.stanh>

// sequential, missing values
#define _KALMANFM_SEQ(r, n, y, F, G, V, W, m0, C0, mask) \
  { \
    vector[r] KALMANF_LL; \
    vector[n] KALMANF_m; \
    matrix[n, n] KALMANF_C; \
    real KALMANF_f; \
    real KALMANF_Q; \
    real KALMANF_Q_inv; \
    real KALMANF_e; \
    vector[n] KALMANF_A; \
    vector[n] KALMANF_Fj; \
    KALMANF_m <- m0; \
    KALMANF_C <- C0; \
    for (KALMANF_i in 1:cols(y)) { \
      KALMANF_m <- G * KALMANF_m; \
      KALMANF_C <- G * KALMANF_C * G _T + W; \
      KALMANF_C <- _MAKE_SYMMETRIC(KALMANF_C);       \
      for (KALMANF_j in 1:r) { \
        if (int_step(mask[KALMANF_i, KALMANF_j])) { \
          KALMANF_LL[KALMANF_j] <- 0.0;
        } else {
          KALMANF_Fj <- col(F, KALMANF_j); \
          KALMANF_f <- dot_product(KALMANF_Fj, KALMANF_m); \
          KALMANF_Q <- KALMANF_Fj _T * KALMANF_C * KALMANF_Fj + V[KALMANF_j]; \
          KALMANF_Q_inv <- 1.0 / KALMANF_Q; \
          KALMANF_e <- y[KALMANF_j, KALMANF_i] - KALMANF_f; \
          KALMANF_A <- KALMANF_C * KALMANF_Fj * KALMANF_Q_inv; \
          KALMANF_m <- KALMANF_m + KALMANF_A * KALMANF_e; \
          KALMANF_C <- KALMANF_C - KALMANF_Q * KALMANF_A * KALMANF_A _T; \
          KALMANF_C <- _MAKE_SYMMETRIC(KALMANF_C); \
          KALMANF_LL[KALMANF_j] <- (-0.5   \
                                    * (log(KALMANF_Q)  \
                                       + KALMANF_Q_inv * pow(KALMANF_e, 2))); \
        } \
      } \
      lp__ <- lp__ + sum(KALMANF_LL); \
    } \
  } 

#endif
