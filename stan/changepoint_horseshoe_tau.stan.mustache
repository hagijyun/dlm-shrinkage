// -*- mode: stan -*-
functions {
  {{> dlm}}
}
data {
  int<lower = 1> n;
  vector[n] y;
  int miss[n];
  real m0;
  real<lower = 0.0> C0;
  real<lower = 0.0> s;
  real<lower = 0.0> tau;
}
parameters {
  real<lower = 0.0> sigma;
  vector<lower = 0.0>[n] lambda;
}
transformed parameters {
  vector[n] log_lik;
  vector[6] dlm[n + 1];
  vector[n] W;
  
  for (i in 1:n) {
    W[i] <- pow(sigma, 2) * pow(tau, 2) * pow(lambda[i], 2);
  }
  {
    vector[n] V;
    V <- rep_vector(pow(tau, 2), n);
    dlm <- dlm_local_level_filter(n, y, miss, V, W, m0, C0);
    log_lik <- dlm_local_level_filter_loglik(n, dlm, miss);
  }

}
model {
  real ll;
  
  sigma ~ cauchy(0.0, s);
  lambda ~ cauchy(0.0, 1);
  increment_log_prob(sum(log_lik));
}
generated quantities {
  vector[1] mu[n + 1];
  vector[1] omega[n];
  vector[1] kalman[n];

  {
    matrix[1, 1] G_tv[n];
    
    G_tv <- rep_array(rep_matrix(1.0, 1, 1), n);
    mu <- dlm_filter_bsample_rng(n, 1, 1, G_tv, dlm);
  }
  for (i in 1:n) {
    omega[i] <- mu[i + 1] - mu[i];
  }
  for (i in 1:n) {
    kalman[i] <- dlm_get_C(i, 1, 1, dlm) * dlm_get_Q_inv(i, 1, 1, dlm);
  }
  
}
